{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Yuniverse","text":""},{"location":"#hi-this-is-yun","title":"\ud83d\udc4b Hi, this is Yun","text":"Python<pre><code>class Me:\ndef __init__(self, name, career, position, projects, skills, speak):\nself.name = Yun\nself.career = 'Zilliz (https://zilliz.com/)'\nself.position = 'Technical Writer'\nself.projects = ['Milvus', 'KubeSphere']\nself.skills = Technical Writing, Editing, Proofreading, Git, Linux, Docker, Kubernetes, Python\nself.speak = English, Chinese\ndef introduce(self):\nprint(\"Hi there, this is \" + self.name + \".\")\nprint(\"I'm currently working as a \" + self.position + \"at\" + self.career + \".\")\nprint(\"I'm an advocate for open source and have contributed to projects such as \" + self.projects + \".\")\nprint(\"My skills include \" + \", \".join(self.skills) + \".\")\nprint(\"As a language student at university, I'm fluent in \" + \", \".join(self.speak) + \".\")\n# Create an instance of the Me class\nme = Me()\n# Call the introduce() method to introduce yourself\nme.introduce()\n</code></pre>"},{"location":"#care-to-contact","title":"\ud83d\udc50 Care to contact?","text":""},{"location":"about/","title":"About Me","text":"<p>I write things.</p>"},{"location":"concepts/","title":"Concepts","text":"<code>String</code> <p>A string is a collection of characters, mostly treated as a single unit. A string is used to store text values like a name, address, message, etc.</p> <code>Slice</code> <p>A slice is a subset of characters from a string. We use the syntax <code>[ i : f ]</code> to specify the initial and final index of the string to access a slice. There are several ways to access a slice of a string:</p> Text Only<pre><code>- Use both values, as in [ i : f ], to access the slice from index i to index f-1.\n- Use only the intial value, as in [ i : ], to access the slice from index i to the end of the string.\n- Use only the final value, as in [ : f ], to access the slice from the start of the string to index f-1.\n</code></pre> <code>Nested list</code> <p>A nested list is a list that contains other lists as its values or members. The container list is termed an outer list, and the member list is termed an inner list. Example: <code>alist = ['aa', ['b', 'c'], 'dd']</code>.</p>"},{"location":"screenshots_tech_docs/","title":"Screenshots or not, for tech docs","text":"<p>Screenshots are a common and useful element in technical documentation. They can help readers visualize the interface, follow the steps, and verify the results of a task. However, screenshots also have some drawbacks, such as taking up space, requiring maintenance, and potentially revealing sensitive information. In this blog post, I will share some tips on when and how to capture screenshots for your technical documentation.</p>"},{"location":"screenshots_tech_docs/#when-to-capture","title":"When to capture","text":"<p>You should capture screenshots when they add value to your documentation. Some situations where screenshots are helpful are:</p> <ul> <li>When you introduce a new feature or concept that is not familiar to your audience.</li> <li>When you show a complex or important procedure that has multiple steps or options.</li> <li>When you illustrate a result or outcome that is not obvious or expected.</li> <li>When you compare or contrast different scenarios or alternatives.</li> </ul>"},{"location":"screenshots_tech_docs/#when-not-to-capture","title":"When not to capture","text":"<p>You should avoid taking screenshots when they are redundant, irrelevant, or distracting. Some situations where screenshots are not necessary are:</p> <ul> <li>When you describe a simple or common task that does not require visual guidance.</li> <li>When you repeat the same screenshot multiple times without any changes or annotations.</li> <li>When you include too many screenshots that clutter your page and make it hard to read.</li> <li>When you violate the privacy or security of your users or your organization.</li> </ul> <p>Another situation where you\u2019re better off without screenshots is attaching code samples. In such cases, it is often more effective to copy and paste the code directly into the document, rather than taking a screenshot of it.</p>"},{"location":"screenshots_tech_docs/#what-to-capture","title":"What to capture","text":"<p>The golden rule for creating quality screenshots is to capture the feature you\u2019re showing, with a bit of context included. You should capture only the essential elements in your screenshots. That being said, you should find the balance between including the details that provide context to the screenshot and adding too many distracting elements.</p> <p>Some guidelines for what to capture are:</p> <ul> <li>Crop your screenshots to show only the relevant parts of the interface. Remove any unnecessary menus, toolbars, icons, or windows.</li> <li>Focus on the action or result that you want to highlight. Use arrows, circles, boxes, or labels to draw attention to them.</li> <li>Use consistent sizes, resolutions, and formats for your screenshots. Follow the style and branding guidelines of your organization.</li> <li>Use high-quality images that are clear and legible. Avoid blurry, pixelated, or distorted screenshots.</li> </ul> <p>Here's an example screenshot obtained from the Azure SQL Database tutorial. You can see that sensitive information such as the server name, admin, and password is replaced with placeholders.</p> <p></p> <p>Note</p> <p>Making the user zoom in on large screenshots is not the best user experience, so it\u2019s better to make the spotlight of your screenshot immediately visible.</p>"},{"location":"screenshots_tech_docs/#what-not-to-capture","title":"What not to capture","text":"<p>You should avoid capturing any elements that are irrelevant, confusing, or harmful in your screenshots. For example, taking screenshots of your organization's internal information may lead to security breaches.</p> <p>Some guidelines for what not to capture are:</p> <ul> <li>Do not include any personal or confidential information in your screenshots. This includes names, email addresses, phone numbers, passwords, credit card numbers, etc. If you cannot avoid capturing such information, use a tool to blur or mask it.</li> <li>Do not include any errors, warnings, or notifications in your screenshots. This includes pop-ups, alerts, messages, or indicators that may imply something is wrong or incomplete. If you cannot avoid capturing such elements, use a tool to remove or edit them.</li> <li>Do not include any outdated or inconsistent information in your screenshots. This includes dates, times, versions, languages, currencies, etc. If you cannot avoid capturing such information, use a tool to update or standardize it.</li> </ul> <p>It\u2019s best to keep names out of screenshots in publicly available technical documentation. Besides real personal names, you should also obscure the names of servers, domains, and network folders from your technical documentation screenshots.</p> <p>Here's an example screenshot obtained from the Azure SQL Database tutorial. You can see that the surrounding elements are included in the screenshot, so that users can locate the feature.</p> <p></p> <p>Note</p> <p>If your product is prone to changes and requires a lot of\u00a0technical documentation maintenance, you should keep in mind that screens that are volatile aren\u2019t the best candidates for screenshots.</p>"},{"location":"screenshots_tech_docs/#what-to-highlight-in-screenshots","title":"What to highlight in screenshots","text":"<p>You should highlight the key points or benefits of your screenshots. Some ways to highlight them are:</p> <ul> <li>Use captions or titles to explain what your screenshots show and why they are important.</li> <li>Use colors or contrasts to emphasize the differences or similarities between your screenshots.</li> <li>Use animations or transitions to show the changes or progressions of your screenshots.</li> <li>Use stories or scenarios to provide context and relevance for your screenshots.</li> </ul>"},{"location":"screenshots_tech_docs/#checklist-for-screenshots","title":"Checklist for screenshots","text":"<p>Here are also some golden rules of thumb for screenshots usage in technical documentation:</p> <ul> <li> Size: Make screenshots no larger than 600 pixels wide.</li> <li> Scope: Limit the scope of a screenshot to just the portion of the UI that shows the action, plus enough surrounding details to help the user locate the item.</li> <li> Callouts: Use only arrows and boxes for callouts.</li> <li> File name: Create unique and meaningful file names to easily differentiate between screenshots, reflecting what has happened on the screenshots.</li> <li> Personal or private details: Make sure to mask, modify, or remove any personal identifiers, passwords, logins, or other information that could compromise security.</li> <li>  property: Use the  property to briefly describe the screenshot for visually-impaired readers. <p>By following these tips and checklists, you can create effective and engaging screenshots for your technical documentation.</p> <p>Happy documenting!</p>"},{"location":"set_up_blog/","title":"Set up your personal blog in minutes","text":"<p>In this blog post, I'll show you how to set up a personal blog in minutes using MkDocs and GitHub Pages. MkDocs is a simple documentation generator, and GitHub Pages is a free hosting service that lets you publish your website directly from a GitHub repository. By combining these two tools, you can create a fully-functional personal blog that is easy to set up and customize. Follow along and learn how to set up your own personal blog in just a few minutes!</p>"},{"location":"set_up_blog/#why-a-personal-blog","title":"Why a personal blog","text":"<p>Setting up a personal blog can be beneficial for a technical writer in several ways:</p> <ul> <li> <p>Establishing an online presence: A personal blog can help a technical writer establish an online presence and showcase their expertise in a particular field. This can help them build a personal brand and attract potential clients or employers.</p> </li> <li> <p>Demonstrating writing skills: A personal blog can be a platform for a technical writer to showcase their writing skills. By writing regularly on their blog, they can demonstrate their ability to communicate complex technical information in a clear and concise manner.</p> </li> <li> <p>Building a portfolio: A personal blog can also serve as a portfolio of a technical writer's work. They can use their blog to showcase their writing samples, case studies, and other relevant work examples.</p> </li> <li> <p>Sharing knowledge: By sharing their knowledge and expertise on their personal blog, a technical writer can establish themselves as a thought leader in their field. This can help them build credibility and attract new clients or job opportunities.</p> </li> <li> <p>Networking: A personal blog can also be a way for a technical writer to network with others in their field. By engaging with their readers and other bloggers, they can build relationships and expand their professional network.</p> </li> </ul>"},{"location":"set_up_blog/#set-up-mkdocs","title":"Set up MkDocs","text":"<p>To use MkDocs, you need to install pip. You can find instructions on how to install pip here. If you have pip, make sure to update it, and then install MkDocs. While you install MkDocs, you should also pick a theme (check out the options here). In the example, we picked the mkdocs-material theme.</p> <p>Run the following code to install <code>pip</code>, <code>MkDocs</code> and theme <code>mkdocs-material</code>:</p> Bash<pre><code>pip install --upgrade pip\npip install mkdocs\npip install mkdocs-material\n</code></pre> <p>Now you\u2019re ready to create your documentation. Run the command below, but replace <code>PROJECT_NAME</code> with whatever your project name is:</p> Bash<pre><code>mkdocs new PROJECT_NAME # Create a new MkDocs project\ncd PROJECT_NAME # Redirect to the directory where the project is created\n</code></pre> <p>You should see a file named mkdocs.yaml and a folder named docs. The folder will have a single markdown file, that is, index.md.</p> <p>To preview the docs layout, run <code>mkdocs serve</code> and then Point your browser to <code>http://127.0.0.1:8000/</code>. If everything's up, information similar to the following appears:</p> <p></p> <p>Then, open <code>mkdocs.yaml</code>, and you can see the following:</p> Bash<pre><code>site_name: My Docs\n</code></pre> <p>We\u2019re going to edit this file. First, we\u2019ll create a generic outline; feel free to fill in the placeholder variables.</p> YAML<pre><code>site_name: NAME\nnav:\n- Home: index.md\n- Page2: page2.md\n- Section1:\n- Subpage1: subpage1.md\n- Subpage2: subpage2.md\ntheme:\nname: THEME_DOWNLOADED\n</code></pre> <p>For example, assume that I want to set up a personal blog, sharing daily insights and showcasing writing samples. Then, this is what I would like to include in <code>mkdocs.yml</code>:</p> YAML<pre><code>site_name: My Blog\nnav:\n- Home: index.md\n- About: about.md\n- Writing:\n- \"Tech\": writing/article1.md\n- \"Rambling\": writing/article2.md\n- Learn:\n- \"Coding\": learn/article1.md\n- \"AI\": learn/article2.md\ntheme:\nname: material\n</code></pre> <p>Note that all the folders and directories included in <code>mkdocs.yaml</code> must be in the <code>docs</code> directory. This is how my structure would look like:</p> Text Only<pre><code>PROJECT_NAME/\n    docs/\n        index.md\n        about.md\n        writing/\n             article1.md\n             article2.md\n        learn/\n             article1.md\n             article2.md\n    mkdocs.yaml\n</code></pre>"},{"location":"set_up_blog/#build-your-site","title":"Build your site","text":"<p>After all steps above are completed, you can use the following code to build a static site from Markdown files:</p> Bash<pre><code>mkdocs build\n</code></pre> <p>Next, you can proceed to the next step, hosting the site on GitHub Pages.</p>"},{"location":"set_up_blog/#lastly-deploy-your-site","title":"Lastly, deploy your site","text":"<p>To end, we\u2019ll host our documentation on GitHub Pages. Simply run <code>mkdocs gh-deploy</code>. It should have created a new branch in your repository that will host your site at <code>USERNAME.github.io/REPOSITORY_NAME</code>.</p> <p>If you want to learn more about MkDocs options, visit their official website.</p>"},{"location":"template-based-doc-generation/","title":"Use Python to generate docs based on templates","text":"<p>In today's digital age, document generation plays a crucial role in various industries and sectors. The efficiency and accuracy of document generation significantly impact business processes, productivity, and customer satisfaction.</p> <p>One powerful approach to streamlining document creation is template-based document generation.</p> <p>Templates provide a structured framework that allows for consistent formatting and content placement. They offer numerous advantages, including time-saving, standardization, and branding consistency. With templates, businesses can easily generate personalized documents by replacing placeholders with relevant data.</p> <p>However, the potential of template-based document generation doesn't end there. By incorporating Natural Language Processing (NLP) and Artificial Intelligence (AI) techniques, we can take document automation to a whole new level.</p> <p>NLP enables intelligent analysis and understanding of the text, while AI provides advanced capabilities such as data extraction, content generation, and automated decision-making. Together, NLP and AI can enhance document generation by automating data entry, extracting valuable insights, and generating tailored content based on user preferences.</p> <p>In this blog, we will explore the power of template-based document generation, delve into the benefits it offers, and discover the exciting possibilities when NLP and AI are integrated into the process. Let's see the potential of these technologies to revolutionize the way we create, manage, and utilize documents.</p>"},{"location":"template-based-doc-generation/#template-based-document-generation","title":"Template-Based Document Generation","text":"<p>The template-based approach simplifies and streamlines document generation by providing a structured framework. Templates serve as blueprints, outlining the layout, formatting, and placeholders for dynamic content. When creating documents, we replace these placeholders with actual data, resulting in customized and consistent outputs.</p> <p>To implement template-based document generation, we design templates using familiar applications like Microsoft Word, HTML, or PDF.</p> <p>These templates define the document's structure, including headers, footers, tables, and text formatting. And then, we insert placeholders, marked by specific tags, at the positions where dynamic content will be inserted.</p>"},{"location":"template-based-doc-generation/#benefits-of-using-templates-for-document-generation","title":"Benefits of Using Templates for Document Generation","text":"<p>Using templates can offer a wide range of benefits. First, they save time and effort. Instead of starting from scratch for each document, we can reuse templates, eliminating repetitive work. Templates also ensure consistency across documents, maintaining a professional image for your business.</p> <p>With predefined placeholders, it becomes easy to insert data programmatically, automating the process. This reduces the chances of errors and enables quick generation of documents, especially when dealing with large volumes.</p>"},{"location":"template-based-doc-generation/#template-formats","title":"Template Formats","text":"<p>Template formats vary depending on the intended use and the application employed. Microsoft Word templates (DOCX) are widely used for their flexibility and rich formatting capabilities.</p> <p>HTML templates offer compatibility across different platforms and can be rendered in web browsers or converted to PDF. PDF templates are excellent for maintaining document integrity and ensuring consistent appearance across devices and operating systems.</p> <p>Here's a simple example in Python, using the Docxtemplater library, to demonstrate template-based document generation:</p> Python<pre><code>from docxtpl import DocxTemplate\n# Load the template file\ntemplate = DocxTemplate('invoice_template.docx')\n# Define data for the document\ndata = {\n'customer_name': 'John Doe',\n'order_number': '12345',\n'total_amount': '$100',\n}\n# Render the template with the data\ntemplate.render(data)\n# Save the generated document\ntemplate.save('generated_invoice.docx')\n</code></pre> <p>In this example, we load an invoice template created in Microsoft Word (DOCX format). We populate the template with data such as customer name, order number, and total amount.</p> <p>Finally, we render the template with the data and save the generated invoice as a new document.</p> <p>And now, let\u2019s explore how incorporating Natural Language Processing (NLP) and Artificial Intelligence (AI) into template-based document generation can further enhance its capabilities, opening up exciting possibilities for automation and intelligent document processing.</p>"},{"location":"template-based-doc-generation/#natural-language-processing-nlp-in-document-generation","title":"Natural Language Processing (NLP) in Document Generation","text":"<p>Natural Language Processing (NLP) is a branch of AI that focuses on the interaction between computers and human language. It enables computers to understand, interpret, and generate human language, opening up exciting possibilities in document generation. NLP has various applications that enhance the document creation process.</p> <p>NLP also facilitates language translation in the document generation process. It uses algorithms and models to understand, process, and translate human language. Here's a simplified explanation with basic coding:</p> <ol> <li> <p>Language identification:</p> <ul> <li>NLP can automatically detect the language of a document using libraries like langid.py.</li> <li>Example code snippet:</li> </ul> Python<pre><code>import langid\ntext = \"This is a sample text in English.\"\ndetected_lang = langid.classify(text)\nprint(detected_lang)\n</code></pre> </li> <li> <p>Machine translation:</p> <ul> <li>NLP models and translation APIs like Google Translate enable automated translation.</li> <li>Example code snippet using the Google Translate API:</li> </ul> Python<pre><code>from googletrans import Translator\ntranslator = Translator()\ntext = \"Hello, how are you?\"\ntranslated_text = translator.translate(text, dest='fr').text\nprint(translated_text)\n</code></pre> </li> <li> <p>Post-editing and quality assessment:</p> <ul> <li>NLP tools like LanguageTool or spaCy can help identify errors and improve machine-translated content.</li> <li>Example code snippet using LanguageTool:</li> </ul> Python<pre><code>from language_tool_python import LanguageTool\ntool = LanguageTool('en-US')\ntext = \"This are sample sentences.\"\nerrors = tool.check(text)\nfor error in errors:\nprint(error)\n</code></pre> </li> </ol> <p>By leveraging NLP techniques and tools, businesses can automate language translation in document generation, ensuring accurate and localized content for diverse audiences.</p>"},{"location":"template-based-doc-generation/#the-power-of-ai-in-document-classification-and-content-generation","title":"The Power of AI In Document Classification and Content Generation","text":"<p>In document generation, AI technologies such as machine learning, natural language processing, and computer vision play a vital role. Machine learning algorithms can be trained to recognize patterns in data, enabling AI systems to understand document structures and extract relevant information.</p> <p>AI-driven data extraction and intelligent content organization are crucial aspects of document generation. AI algorithms can automatically extract data from diverse sources such as forms, invoices, or receipts, reducing the need for manual data entry. This not only saves time but also minimizes the risk of errors.</p> <p>Additionally, AI enables an intelligent content organization, where documents are categorized, tagged, and indexed automatically. AI systems can analyze the content and assign appropriate metadata, making it easier to search, retrieve, and manage documents efficiently.</p> <p>AI-powered document classification and automated content generation are game-changers in document generation. AI algorithms can classify documents based on their content, enabling quick categorization and organization of large document repositories. This helps streamline document management and retrieval processes.</p> <p>Moreover, AI can automate content generation by leveraging machine learning models. For example, AI systems can learn from existing documents to generate new content with similar patterns, such as contract clauses or legal agreements. This not only speeds up the document creation process but also ensures consistency and adherence to predefined standards.</p> <p>Here's a simplified Python code example showcasing AI-driven data extraction using the Textract service from AWS:</p> Python<pre><code>import boto3\n# Initialize the Textract client\ntextract_client = boto3.client('textract')\n# Specify the document to extract data from\ndocument_path = 'invoice.pdf'\n# Perform document text extraction using Textract\nresponse = textract_client.detect_document_text(Document={'S3Object': {'Bucket': 'your-bucket', 'Name': document_path}})\n# Retrieve the extracted text\nextracted_text = response['Blocks'][0]['Text']\n# Print the extracted text\nprint('Extracted Text:', extracted_text)\n</code></pre> <p>In this example, we use the Textract service from AWS to extract text from a document (in this case, an invoice in PDF format). The Textract API analyzes the document and returns the extracted text as a response. This AI-driven data extraction eliminates the need for manual data entry and allows for seamless integration into document generation workflows.</p>"},{"location":"template-based-doc-generation/#python-libraries-for-template-based-document-generation","title":"Python Libraries for Template-Based Document Generation","text":"<p>Python offers powerful libraries that simplify template-based document generation. Two popular libraries are Docxtemplater and Jinja2.</p> <p>Docxtemplater allows the creation and manipulation of Microsoft Word documents (DOCX format) with placeholders, while Jinja2 provides a flexible templating engine for generating various types of documents, including HTML, XML, and text files.</p> <p>Creating and customizing templates using Python is straightforward. With Docxtemplater, you can load an existing Word document template, define placeholders, and programmatically replace them with actual data.</p> <p>Jinja2 provides a template engine where you can define templates with dynamic sections and variables. These templates can be rendered with data to generate final documents.</p> <p>Here's a simple example using Docxtemplater to create a customized invoice:</p> Python<pre><code>from docxtpl import DocxTemplate\n# Load the invoice template\ntemplate = DocxTemplate('invoice_template.docx')\n# Define data for the invoice\ndata = {\n'customer_name': 'John Doe',\n'invoice_number': 'INV-001',\n'total_amount': '$100',\n}\n# Render the template with the data\ntemplate.render(data)\n# Save the generated invoice\ntemplate.save('generated_invoice.docx')\n</code></pre> <p>In this code snippet, we load an invoice template created in Microsoft Word (DOCX format) using Docxtemplater. We define the data to be inserted into the template, such as customer name, invoice number, and total amount. Then, we render the template with the provided data and save the generated invoice as a new document.</p> <p>Python libraries like NLTK (Natural Language Toolkit), SpaCy, and TensorFlow provide NLP and AI capabilities that can be integrated into the document generation process. NLTK offers a wide range of NLP functionalities, including text tokenization, part-of-speech tagging, and sentiment analysis.</p> <p>SpaCy provides advanced NLP features such as named entity recognition and dependency parsing. TensorFlow, on the other hand, is a powerful machine-learning framework that can be used for tasks like text classification or content generation.</p> <p>By incorporating these libraries into the document generation workflow, you can leverage NLP and AI techniques to enhance the generated documents. For example, you can use NLTK to analyze customer feedback and extract meaningful insights or employ SpaCy to identify and categorize entities mentioned in the documents. TensorFlow can be utilized to train models that generate customized content based on specific criteria or patterns.</p>"},{"location":"template-based-doc-generation/#use-cases-and-real-world-examples","title":"Use Cases and Real-World Examples","text":"<p>In the legal sector, it simplifies contract creation by automating the insertion of client-specific details into standardized templates.</p> <p>In healthcare, it aids in generating medical reports and patient records with consistent formatting.</p> <p>Businesses can leverage templates for creating invoices, sales proposals, or marketing materials, ensuring brand consistency and saving time.</p> <p>AI algorithms can be trained to generate personalized customer communication, such as bank statements or loan agreements, based on individual preferences and data.</p> <p>In the publishing domain, NLP can automate the creation of book summaries or generate metadata for digital content. AI-powered content generation can assist content creators by suggesting topic ideas, generating drafts, or summarizing research articles.</p> <p>The benefits and outcomes of template-based document generation with NLP and AI are remarkable. Businesses experience increased productivity as manual tasks are automated, allowing employees to focus on more strategic activities. Time savings are significant, particularly when dealing with large volumes of documents. Accuracy improves as AI algorithms reduce errors and extract relevant information precisely.</p> <p>Moreover, template-based document generation ensures consistency in document formatting and branding, enhancing the professional image of businesses. The integration of NLP and AI capabilities enables intelligent analysis, extraction, and generation of content, leading to improved decision-making, personalized customer experiences, and enhanced operational efficiency.</p>"},{"location":"vectordb-vs-graphdb/","title":"Vector Databases vs. Graph Databases: A Comprehensive Comparison","text":"<p>In this blog post, we will compare vector databases and graph databases, two types of databases that are widely used in various applications that involve data analysis and machine learning. We will explain what each database is, how they work, and what are their distinctive use cases. We will also discuss how vector databases and graph databases can empower large language models (LLMs), which are a buzzword since the AI revolution caused by ChatGPT.</p> <p>If you\u2019d like a summary of the discussed concepts, see the table below.</p> Item Vector Database Graph Database Data Structure Based on high-dimensional vectors, suitable for handling high-dimensional data such as photos and movies. Built on nodes and edges, suitable for processing data with complicated relationships. Data Type Appropriate for analyzing patterns in the data, but may not be ideal for analyzing relationships between entities. Better suited for analyzing relationships between entities and complex networks. Query Ideal for similarity searches, but may not be as efficient for analyzing relationships between entities. More efficient for analyzing relationships between entities and complex networks, but may not be as efficient for similarity searches. Scalability Highly scalable due to distributed architecture. May not be as scalable as vector databases, but provides more flexibility and functionality. Performance Provides fast similarity searches. Provides fast queries involving relationships. Business Needs and Use Cases The choice depends on specific business needs and use cases. The choice depends on specific business needs and use cases."},{"location":"vectordb-vs-graphdb/#what-is-a-vector-database","title":"What is a Vector Database?","text":"<p>A vector database is a type of database that stores data as high-dimensional vectors, which are mathematical representations of features or attributes. Each vector has a certain number of dimensions, which can range from tens to thousands, depending on the complexity and granularity of the data. The vectors are usually generated by applying some kind of transformation or embedding function to the raw data, such as text, images, audio, video, and others. The embedding function can be based on various methods, such as machine learning models, word embeddings, feature extraction algorithms.</p>"},{"location":"vectordb-vs-graphdb/#why-you-need-a-vector-database","title":"Why You Need a Vector Database","text":"<p>The main advantage of a vector database is that it allows for fast and accurate similarity search and retrieval of data based on their vector distance or similarity. This means that instead of using traditional methods of querying databases based on exact matches or predefined criteria, you can use a vector database to find the most similar or relevant data based on their semantic or contextual meaning. For example, you can use a vector database to:</p> <ul> <li>Find images that are similar to a given image based on their visual content and style.</li> <li>Find documents that are similar to a given document based on their topic and sentiment.</li> <li>Find products that are similar to a given product based on their features and ratings.</li> </ul> <p>To perform similarity search and retrieval in a vector database, you need to use a query vector that represents your desired information or criteria. The query vector can be either derived from the same type of data as the stored vectors (e.g., using an image as a query for an image database), or from different types of data (e.g., using text as a query for an image database). Then, you need to use a similarity measure that calculates how close or distant two vectors are in the vector space. The similarity measure can be based on various metrics, such as cosine similarity, euclidean distance, hamming distance, and jaccard index. The result of the similarity search and retrieval is usually a ranked list of vectors that have the highest similarity scores with the query vector. You can then access the corresponding raw data associated with each vector from the original source or index.</p>"},{"location":"vectordb-vs-graphdb/#what-is-a-graph-database","title":"What is a Graph Database?","text":"<p>A graph database is a type of database that stores data as nodes and edges, which are entities and relationships. Each node can have one or more properties or attributes, such as name, type, value, etc. Each edge can have one or more labels or types, such as <code>friend_of</code>, <code>belongs_to</code>, etc. The nodes and edges form a graph structure that represents the data and its connections.</p>"},{"location":"vectordb-vs-graphdb/#why-you-need-a-graph-database","title":"Why You Need a Graph Database","text":"<p>The main advantage of a graph database is that it allows for efficient and flexible analysis of data with complex relationships and networks. This means that instead of using traditional methods of querying databases based on tables and joins, you can use a graph database to find the most relevant or interesting data based on their connections and patterns. For example, you can use a graph database to:</p> <ul> <li>Find people who are connected to a given person through some criteria, such as friends, colleagues, family members, etc.</li> <li>Find products that are related to a given product through some criteria, such as categories, reviews, purchases, etc.</li> <li>Find events that are influenced by or influence other events through some criteria, such as causes, effects, dependencies, etc.</li> </ul> <p>To perform analysis in a graph database, you need to use a query language that supports graph operations and traversal. The query language can be based on various standards or frameworks, such as Cypher, Gremlin, SPARQL, etc. The result of the analysis is usually a subgraph or a set of nodes and edges that match the query criteria. You can then access the corresponding properties and attributes associated with each node and edge from the original source or index.</p>"},{"location":"vectordb-vs-graphdb/#use-cases-comparison","title":"Use Cases Comparison","text":"<p>The choice between vector databases and graph databases depends on specific business needs and use cases. Both types of databases have their own strengths and weaknesses when it comes to handling different types of data and queries. Here are some examples of use cases where one type of database may be more suitable than the other:</p> <ul> <li>Image search: Vector databases are more suitable for image search applications because they can store and retrieve images based on their features and similarity. Graph databases may not be as efficient for image search because they may not capture the nuances and variations of image content and style.</li> <li>Fraud detection: Graph databases are more suitable for fraud detection applications because they can analyze relationships between entities like users, accounts, and transactions. Vector databases may not be as efficient for fraud detection because they may not capture the complexity and dynamics of fraud patterns and networks.</li> <li>Recommendation systems: Both vector databases and graph databases can be used for recommendation systems, depending on the type of data and criteria. Vector databases can be used to recommend items based on their similarity or relevance to a given item or user. Graph databases can be used to recommend items based on their relationships or connections to a given item or user.</li> <li>Natural language processing: Both vector databases and graph databases can be used for natural language processing applications, depending on the type of data and task. Vector databases can be used to store and retrieve text based on their meaning and sentiment. Graph databases can be used to store and analyze text based on their structure and syntax.</li> </ul>"},{"location":"vectordb-vs-graphdb/#how-they-can-empower-llms","title":"How They Can Empower LLMs","text":"<p>Large language models (LLMs) are a type of machine learning model that can generate natural language text based on some input or context. LLMs are trained on massive amounts of text data from various sources, such as books, articles, websites, etc. LLMs can perform various tasks, such as text summarization, text generation, text completion, text translation, etc.</p> <p>However, LLMs often face challenges such as generating inaccurate or irrelevant information; lacking factual consistency or common sense; repeating or contradicting themselves; being biased or offensive. These challenges can be attributed to the limitations of the training data and the model architecture. One way to overcome these challenges is to use vector databases and graph databases to enhance the LLMs' capabilities and performance.</p> <p>Vector databases can help LLMs by providing them with high-dimensional vectors that represent the semantic or contextual information of the input or output text. These vectors can be used to guide the LLMs to generate more relevant and coherent text based on the vector similarity or distance. For example, a vector database can help an LLM to generate a summary of a document by providing it with a vector that represents the main idea or theme of the document.</p> <p>Graph databases can help LLMs by providing them with nodes and edges that represent the factual or logical information of the input or output text. These nodes and edges can be used to guide the LLMs to generate more accurate and consistent text based on the graph structure or traversal. For example, a graph database can help an LLM to generate a biography of a person by providing it with a subgraph that represents the person's attributes and relationships.</p>"},{"location":"vectordb-vs-graphdb/#conclusion","title":"Conclusion","text":"<p>In this blog post, we have compared vector databases and graph databases, two types of databases that are widely used in various applications that involve data analysis and machine learning. We have explained what each database is, how they work, and what are their distinctive use cases. We have also discussed how vector databases and graph databases can empower large language models (LLMs), which are a buzzword since the AI revolution caused by ChatGPT.</p> <p>We hope that this blog post has helped you understand the differences and similarities between vector databases and graph databases, and how they can benefit your business needs and use cases.</p>"},{"location":"year_review_2022/","title":"Year in review 2022","text":"<p>In many ways, 2022 seemed like an extension of 2021 \u2014 the stories all too familiar, only now with added intensity and uncertainty. COVID-19 curbs got harsher. The climate crisis became worse. Episodes of violence against women more shocking. But a cute Olympics mascot, a handful of remarkable performances by female athletes, and the metaverse bubble served as welcome distractions. For me, personally, the year 2022 might look and feel a bit different.</p>"},{"location":"year_review_2022/#work","title":"Work","text":"<p>In May, 2022, I left my previous job as a translator as I found translating tech doc made me passive and it had limited value to improve my tech skills since I was forced to deal with the texts of all types, from storage to databases, and to containers. This might be helpful if my goal was to become a generalist. However, as a language student specialized in zero, I seek to become a T-shaped talent who deep dives into a specific field first and also has basic knowledge in other fields. That\u2019s basically the reason why I decided to change my job and started to work for the current startup as a technical writer.</p> <p>Of course, I encountered a handful of challenges and uncertainties in the new position. For example, when I first came to the company, I didn\u2019t know what git was, how to manage content and collaborate with other colleagues using PRs, what documentation as code was, and let alone how HTML, CSS, JS work. Besides, the management of my current company has big differences from my previous one. This startup provides me with a platform to try something out of the box but also forces me to start from scratch.</p>"},{"location":"year_review_2022/#life-and-growth","title":"Life and growth","text":"<p>In 2022, despite COVID-19 and lockdowns, I travelled several times, most of which were side trips. For the new year, the softening of the COVID-19 control strategies indicates more opportunities to go overseas. So, I expect to travel overseas at least once this year!</p> <p>For personal development, in 2023, I\u2019ll make plans to equip myself with more tech skills. Of course, learning new skills takes courage, and I'm willing to be a beginner, to experience the awkwardness of not knowing how things work. We are wired to seek comfort and avoid failure. It may seem counterintuitive, but I believe that the faster you fail, adjust and try again, the faster you succeed.</p> <p>Here, I'll list my professional plans for 2023: - Set up my personal GitHub Pages - Write at lease one technical blog twice a week - Write for InfoQ and CNCF - Pass AWS Cloud Practitioner Certification by January - Grasp frontend programming languages, including HTML, CSS, and JavaScript, and get certified on freeCodeCamp by April - Get more familiar with Docker and Kubernetes, and get certified by KCNA by the end of July - Finish Foundations of Digital Marketing nad E-commerce on Coursera by September</p>"},{"location":"year_review_2022/#move-forward","title":"Move forward","text":"<p>Layoffs have been the buzzword and hashtag of the year 2022. As tech giants Meta, Twitter, among many other big and small fish in the business ecosystem, undertake a firing spree, they are leaving several employees emotionally and mentally wounded. For some, the financial anxiety of losing a job is the real pinch. But for most, the emotional upheaval that a layoff brings, is the deeper wound that takes time to heal.</p> <p>Working for a tech company without IT background, I also suffered from insecurity and sometimes even undervalued myself. This sense became more intense when my company started to make redundancies and my peers doing similar things got laid off all of a sudden. However, it may be normal to feel helpless, hapless and hopeless, all at the same time. But we have got to find inner strength to rebuild our confidence after a layoff, and bounce back.</p> <p>I\u2019m hopeful for 2023 despite many clouds and uncertainties on the horizon. I hope to meet and enjoy time with my friends and dearest ones in the coming year.</p> <p>Happy 2023!</p>"}]}